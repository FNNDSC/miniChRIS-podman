---

apiVersion: v1
kind: ConfigMap
metadata:
  name: minichris-cube-config
  labels:
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "Configuration of ChRIS backend production mode, security options, and secrets"
data:
  DJANGO_SETTINGS_MODULE: "config.settings.production"
  CUBE_CELERY_POLL_INTERVAL: "5.0"
  DJANGO_ALLOWED_HOSTS: "*"
  DJANGO_SECRET_KEY: "secret"
  DJANGO_CORS_ALLOW_ALL_ORIGINS: "true"
  DJANGO_CORS_ALLOWED_ORIGINS: ""
  DJANGO_SECURE_PROXY_SSL_HEADER: ""
  DJANGO_USE_X_FORWARDED_HOST: "false"
  STATIC_ROOT: "/home/localuser/mod_wsgi-0.0.0.0:8000/htdocs/static/"
  AUTH_LDAP: "false"
  CHRIS_STORE_URL: "https://chrisstore.co/api/v1/"
  DATABASE_HOST: "minichris-postgres-pod"
  DATABASE_PORT: "5432"
  CELERY_BROKER_URL: "amqp://minichris-rabbitmq-pod:5672"
  SWIFT_AUTH_URL: "http://minichris-swift-pod:8080/auth/v1.0"
  SWIFT_CONTAINER_NAME: "users"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: minichris-db-config
  labels:
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "Configuration of a PostgresSQL databse used by the ChRIS backend"
data:
  POSTGRES_DB: "chris"
  POSTGRES_USER: "chris"
  POSTGRES_PASSWORD: "chris1234"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: minichris-docker-swift-onlyone-config
  labels:
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "Configuration of the swift container"
data:
  SWIFT_USERNAME: "chris:chris1234"
  SWIFT_KEY: "testing"
---

apiVersion: apps/v1

kind: Deployment
metadata:
  name: minichris-postgres
  labels:
    app: minichris-postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "Database for ChRIS"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minichris-postgres
  template:
    metadata:
      name: minichris-postgres
      labels:
        app: minichris-postgres
    spec:
      containers:
        - name: postgres
          image: docker.io/library/postgres:13
          envFrom:
            - configMapRef:
                name: minichris-db-config
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minichris-db-data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minichris-db-data
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1

kind: Deployment
metadata:
  name: minichris-swift
  labels:
    app: minichris-swift
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "Database for ChRIS"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minichris-swift
  template:
    metadata:
      name: minichris-swift
      labels:
        app: minichris-swift
    spec:
      containers:
        - name: swift
          image: docker.io/fnndsc/docker-swift-onlyone:latest
          ports:
            - name: http
              containerPort: 8080
          envFrom:
            - configMapRef:
                name: minichris-docker-swift-onlyone-config
          volumeMounts:
            - name: swift-storage
              mountPath: /srv

      volumes:
        - name: swift-storage
          persistentVolumeClaim:
            claimName: minichris-swift-storage


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minichris-swift-storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1

kind: Deployment
metadata:
  name: minichris-rabbitmq
  labels:
    app: minichris-rabbitmq
    app.kubernetes.io/component: queue
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "ChRIS backend asynchronous task queue"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minichris-rabbitmq
  template:
    metadata:
      name: minichris-rabbitmq
      labels:
        app: minichris-rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: docker.io/library/rabbitmq:3
---
# Deployment configuration for ChRIS_ultron_backEnd (CUBE).
#
# CUBE consists of:
#
# - a server which handles HTTP requests
# - several Celery workers
#
# This file is convenient for running a single replica of CUBE on Podman.
# In large production use cases, the above components should be defined
# in multiple separate Deployments because they can scale independently of one another.

apiVersion: apps/v1

kind: Deployment
metadata:
  name: minichris-cube
  labels:
    app: minichris-cube
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "ChRIS_ultron_backEnd in a single replica of a single pod."
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minichris-cube
  template:
    metadata:
      name: minichris-cube
      labels:
        app: minichris-cube
        org.chrisproject.role: "ChRIS ultron backEnd"  # selector used by chrisomatic
    spec:
      initContainers:
        - name: migratedb
          image: ghcr.io/fnndsc/cube:4.0.0.pre7
          command:
            - sh
            - -c
            - 'python migratedb.py -u $POSTGRES_USER -p $POSTGRES_PASSWORD -d $POSTGRES_DB --host $DATABASE_HOST --noinput'
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
            - configMapRef:
                name: minichris-docker-swift-onlyone-config
      containers:
        - name: server
          image: ghcr.io/fnndsc/cube:4.0.0.pre7
          ports:
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
            - configMapRef:
                name: minichris-docker-swift-onlyone-config
          env:
            - name: DJANGO_COLLECTSTATIC
              value: "on"

        - name: cube-worker
          image: ghcr.io/fnndsc/cube:4.0.0.pre7
          command: ["celery", "-A", "core", "worker", "-c", "4", "-l", "info", "-Q", "main1,main2"]
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
            - configMapRef:
                name: minichris-docker-swift-onlyone-config

        - name: cube-worker-periodic
          image: ghcr.io/fnndsc/cube:4.0.0.pre7
          command: ["celery", "-A", "core", "worker", "-c", "2", "-l", "info", "-Q", "periodic"]
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
            - configMapRef:
                name: minichris-docker-swift-onlyone-config

        - name: cube-celery-beat
          image: ghcr.io/fnndsc/cube:4.0.0.pre7
          command: ["celery", "-A", "core", "beat", "-l", "info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
            - configMapRef:
                name: minichris-docker-swift-onlyone-config

---
# Chris UI using Podman

apiVersion: apps/v1

kind: Deployment
metadata:
  name: minichris-chrisui
  labels:
    app: minichris-chrisui
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: miniChRIS
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minichris-chrisui
  template:
    metadata:
      name: minichris-chrisui
      labels:
        app: minichris-chrisui
    spec:
      containers:
        - name: chrisui
          image: ghcr.io/fnndsc/chris_ui:20230418.240-9dca09b4
          args: ["sirv", "--host", "--single"]
          ports:
          - containerPort: 3000
            hostPort: 8020
          env:
            - name: REACT_APP_CHRIS_UI_URL
              value: http://localhost:8000/api/v1/
            - name: REACT_APP_PFDCM_URL
              value: http://localhost:4005/
---
# pfcon+pman pair using Podman

apiVersion: apps/v1

kind: Deployment
metadata:
  name: minichris-pfcon
  labels:
    app: minichris-pfcon
    app.kubernetes.io/component: computeresource
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "pfcon+pman services connecting CUBE to Podman"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minichris-pfcon
  template:
    metadata:
      name: minichris-pfcon
      labels:
        app: minichris-pfcon
    spec:
      containers:
        - name: pfcon
          image: ghcr.io/fnndsc/pfcon:5.0.0
          ports:
            - name: pfcon
              containerPort: 5005
          env:
            - name: COMPUTE_SERVICE_URL
              value: http://localhost:5010/api/v1/
            - name: SECRET_KEY
              value: secret
            - name: PFCON_USER
              value: pfcon
            - name: PFCON_PASSWORD
              value: pfcon1234
          volumeMounts:
            - mountPath: /var/local/storeBase
              name: storebase

        - name: pman
          image: ghcr.io/fnndsc/pman:5.0.0.a4
          ports:
            - name: pman
              containerPort: 5010
          env:
            - name: CONTAINER_ENV
              value: docker
            - name: STORAGE_TYPE
              value: docker_local_volume
            - name: VOLUME_NAME
              value: minichris-storebase
            - name: STOREBASE
            - name: SECRET_KEY
              value: secret
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: podman-socket

      # Let SELinux allow us to access the Podman socket
      # https://unix.stackexchange.com/a/595152
      securityContext:
        seLinuxOptions:
          type: spc_t

      volumes:
        - name: storebase
          persistentVolumeClaim:
            claimName: minichris-storebase
        - name: podman-socket
          hostPath:
            # pman needs to run containers, and it does so by communicating with the Podman socket.
            # This means that the Podman system service must be running, and the socket's path
            # must be known.
            # The hard-coded path below is replaced with the user-specific value by minichris.sh
            path: /run/user/1000/podman/podman.sock
            type: Socket


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minichris-storebase
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
