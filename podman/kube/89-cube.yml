---
# Deployment configuration for ChRIS_ultron_backEnd (CUBE).
#
# CUBE consists of:
#
# - a server which handles HTTP requests
# - several Celery workers
#
# This file is convenient for running a single replica of CUBE on Podman.
# In large production use cases, the above components should be defined
# in multiple separate Deployments because they can scale independently of one another.

apiVersion: apps/v1

kind: Deployment
metadata:
  name: minichris-cube
  labels:
    app.kubernetes.io/name: minichris-cube
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: miniChRIS
  annotations:
    kubernetes.io/description: "ChRIS_ultron_backEnd in a single replica of a single pod."
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: minichris-cube
  template:
    metadata:
      name: minichris-cube
      labels:
        app.kubernetes.io/name: minichris-cube
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: miniChRIS
        org.chrisproject.role: "ChRIS_ultron_backEnd"  # selector used by chrisomatic
      annotations:
        kubernetes.io/description: "ChRIS_ultron_backEnd in a single replica of a single pod."
    spec:
      initContainers:
        - name: db-ready
          image: docker.io/library/postgres:16
          command:
            - /bin/sh
            - -c
            - until pg_isready -U chris -h minichris-postgres-pod -p 5432; do sleep 1; done
        - name: migratedb
          image: ghcr.io/fnndsc/cube:5.0.0
          command: ["python", "manage.py", "migrate", "--noinput"]
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
          volumeMounts:
            - mountPath: /data
              name: file-storage
      containers:
        - name: server
          image: ghcr.io/fnndsc/cube:5.0.0
          ports:
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
          volumeMounts:
            - mountPath: /data
              name: file-storage

        - name: cube-worker
          image: ghcr.io/fnndsc/cube:5.0.0
          command: ["celery", "-A", "core", "worker", "-c", "4", "-l", "info", "-Q", "main1,main2"]
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
          volumeMounts:
            - mountPath: /data
              name: file-storage

        - name: cube-worker-periodic
          image: ghcr.io/fnndsc/cube:5.0.0
          command: ["celery", "-A", "core", "worker", "-c", "2", "-l", "info", "-Q", "periodic"]
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
          volumeMounts:
            - mountPath: /data
              name: file-storage

        - name: cube-celery-beat
          image: ghcr.io/fnndsc/cube:5.0.0
          command: ["celery", "-A", "core", "beat", "-l", "info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
          envFrom:
            - configMapRef:
                name: minichris-cube-config
            - configMapRef:
                name: minichris-db-config
          volumeMounts:
            - mountPath: /data
              name: file-storage

      volumes:
        - name: file-storage
          persistentVolumeClaim:
            claimName: minichris-cube-files
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minichris-cube-files
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 40Gi
